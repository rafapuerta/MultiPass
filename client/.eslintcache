[{"H:\\Modulo3\\MultiPass\\client\\src\\index.js":"1","H:\\Modulo3\\MultiPass\\client\\src\\reportWebVitals.js":"2","H:\\Modulo3\\MultiPass\\client\\src\\App.js":"3","H:\\Modulo3\\MultiPass\\client\\src\\Cabecera.js":"4","H:\\Modulo3\\MultiPass\\client\\src\\Footer.js":"5","H:\\Modulo3\\MultiPass\\client\\src\\Conciertos.js":"6","H:\\Modulo3\\MultiPass\\client\\src\\Inicio.js":"7","H:\\Modulo3\\MultiPass\\client\\src\\Usuario.js":"8","H:\\Modulo3\\MultiPass\\client\\src\\Registro.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":2101,"mtime":1610486136341,"results":"13","hashOfConfig":"11"},{"size":4896,"mtime":1610474209124,"results":"14","hashOfConfig":"11"},{"size":560,"mtime":1610473974864,"results":"15","hashOfConfig":"11"},{"size":6776,"mtime":1610583256439,"results":"16","hashOfConfig":"11"},{"size":6204,"mtime":1610738892574,"results":"17","hashOfConfig":"11"},{"size":13634,"mtime":1610584714006,"results":"18","hashOfConfig":"11"},{"size":7897,"mtime":1610450576675,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1g7jnu5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"H:\\Modulo3\\MultiPass\\client\\src\\index.js",[],["42","43"],"H:\\Modulo3\\MultiPass\\client\\src\\reportWebVitals.js",[],"H:\\Modulo3\\MultiPass\\client\\src\\App.js",[],"H:\\Modulo3\\MultiPass\\client\\src\\Cabecera.js",["44","45","46"],"import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Nav, Navbar, Modal, Form, Alert } from \"react-bootstrap\";\r\n\r\nimport logo from \"./img/logo.svg\";\r\nimport logo2 from \"./img/logo2.svg\";\r\n\r\nconst Cabecera = ({\r\n  sesion,\r\n  usuario,\r\n  login,\r\n  feedback,\r\n  setFeedback,\r\n}) => {\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [pass, setPass] = useState(\"\");\r\n\r\n  const handleFeedback = () => {\r\n    setFeedback(\"\");\r\n  };\r\n  const handleMail = (e) => {\r\n    setEmail(e.target.value);\r\n  };\r\n  const handlePass = (e) => {\r\n    setPass(e.target.value);\r\n  };\r\n\r\n  if (sesion) {\r\n    return (\r\n      <Navbar sticky=\"top\" collapseOnSelect\r\n      expand=\"sm\" bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand>\r\n          <Link to=\"/\">\r\n          <img\r\n            src={logo}\r\n            width=\"40\"\r\n            height=\"40\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"MultiPass logo\"\r\n          />\r\n          <img\r\n            src={logo2}\r\n            height=\"40\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"React Bootstrap logo\"\r\n          />\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Navbar.Text>\r\n              <Link to=\"/conciertos\">Conciertos</Link>\r\n            </Navbar.Text>\r\n          </Nav>\r\n          <Nav>\r\n            <Navbar.Text>\r\n              Hola, <Link to=\"/usuario\">{usuario.nombre}!</Link>\r\n            </Navbar.Text>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Navbar\r\n          sticky=\"top\"\r\n          collapseOnSelect\r\n          expand=\"sm\"\r\n          bg=\"dark\"\r\n          variant=\"dark\"\r\n        >\r\n          <Navbar.Brand>\r\n            <Link to=\"/\">\r\n            <img\r\n              src={logo}\r\n              width=\"40\"\r\n              height=\"40\"\r\n              className=\"d-inline-block align-top\"\r\n              alt=\"MultiPass logo\"\r\n            />\r\n            <img\r\n              src={logo2}\r\n              height=\"40\"\r\n              className=\"d-inline-block align-top\"\r\n              alt=\"React Bootstrap logo\"\r\n            />\r\n            </Link>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Navbar.Text>\r\n                <Link to=\"/conciertos\">Conciertos</Link>\r\n              </Navbar.Text>\r\n            </Nav>\r\n            <Nav>\r\n              <Navbar.Text>\r\n                <Link to=\"\">\r\n                  <a nohref onClick={() => setModalShow(true)}>\r\n                    Iniciar sesión\r\n                  </a>\r\n                </Link>{\" \"}\r\n                o <Link to=\"/usuario/registrar\">Registrar</Link>\r\n              </Navbar.Text>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n          <LoginForm\r\n            feedback={feedback}\r\n            handleFeedback={handleFeedback}\r\n            email={email}\r\n            pass={pass}\r\n            handleMail={handleMail}\r\n            handlePass={handlePass}\r\n            show={modalShow}\r\n            login={login}\r\n            onHide={() => setModalShow(false)}\r\n          />\r\n        </Navbar>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nfunction LoginForm(props) {\r\n  props.handleFeedback();\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Inicio Sesión\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Email</Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              placeholder=\"Introduzca email\"\r\n              value={props.email}\r\n              onChange={props.handleMail}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={props.pass}\r\n              onChange={props.handlePass}\r\n            />\r\n          </Form.Group>\r\n          <Form.Text className=\"text-muted\">{props.feedback}</Form.Text>\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              props.login(props.email, props.pass);\r\n            }}\r\n          >\r\n            Log In\r\n          </Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Cabecera;\r\n","H:\\Modulo3\\MultiPass\\client\\src\\Footer.js",[],"H:\\Modulo3\\MultiPass\\client\\src\\Conciertos.js",["47","48","49"],"import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  CardColumns,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Image,\r\n  Tooltip,\r\n  OverlayTrigger\r\n} from \"react-bootstrap\";\r\n\r\n//-----MEDIA------\r\n\r\nimport gold from \"./img/microphone_gold.png\";\r\nimport silver from \"./img/microphone_silver.png\";\r\nimport bronze from \"./img/microphone_bronze.png\";\r\n\r\n//---------------\r\n\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst Conciertos = ({ sesion, usuario}) => {\r\n\r\n  var peso = 0\r\n  if(sesion){let usado = usuario.entradas.map((entrada) => {peso += entrada.peso})}\r\n  \r\n\r\n\r\n  const [conciertos, setConciertos] = useState([]);\r\n  const [refresh, setRefresh] = useState([])\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"/entradas/conciertos\")\r\n      .then((res) => res.json())\r\n      .then((datos) => {\r\n        setConciertos(datos);\r\n      });\r\n  }, [refresh]);\r\n\r\n  const comprar = (e) => {\r\n    fetch(\"/entradas/comprar\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ id: e.target.value, email: usuario.email }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(function (datos) {\r\n        setRefresh([])\r\n      });\r\n  };\r\n\r\n\r\n  const botonEntrada = (id, categoria, conciertoPeso) => {\r\n\r\n    if (usuario.entradas.some((e) => e.id === id)) {\r\n      return (\r\n        <Button size=\"sm\" variant=\"dark\" block disabled>\r\n          Ya añadido\r\n        </Button>\r\n      );\r\n    }else if(usuario.categoria < categoria){\r\n      return (\r\n        <Button size=\"sm\" variant=\"danger\" block disabled>\r\n          Suscríbete a un plan mayor!\r\n        </Button>)\r\n    }else if((usuario.categoria - peso) < conciertoPeso){\r\n        return (\r\n          <Button size=\"sm\" variant=\"info\" block disabled>\r\n            No queda espacio en tu pase!\r\n          </Button>\r\n        );\r\n    }else if (usuario.categoria === 15) {\r\n      return (\r\n        <Button size=\"sm\" value={id} variant=\"warning\" block onClick={comprar}>\r\n          Añadir\r\n        </Button>\r\n      );\r\n    } else if (usuario.categoria === 10 && categoria !== 15) {\r\n      return (\r\n        <Button size=\"sm\" value={id} variant=\"warning\" block onClick={comprar}>\r\n          Añadir\r\n        </Button>\r\n      );\r\n    } else if (\r\n      usuario.categoria === 5 &&\r\n      categoria !== 10 &&\r\n      categoria !== 15\r\n    ) {\r\n      return (\r\n        <Button size=\"sm\" value={id} variant=\"warning\" block onClick={comprar}>\r\n          Añadir\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  const tier = (categoria) => {\r\n    switch (categoria) {\r\n      case 5:\r\n        return <Tooltip id=\"tier-help\">Bronze</Tooltip>;\r\n      case 10:\r\n        return <Tooltip id=\"tier-help\">Silver</Tooltip>;\r\n      case 15:\r\n        return <Tooltip id=\"tier-help\">Gold</Tooltip>;\r\n      default:\r\n        return <p>FALLO!</p>;\r\n    }\r\n  }\r\n    \r\n\r\n  const categoria = (categoria) => {\r\n    switch (categoria) {\r\n      case 5:\r\n        return <Image style={{ width: 30 }} src={bronze} />;\r\n      case 10:\r\n        return <Image style={{ width: 30 }} src={silver} />;\r\n      case 15:\r\n        return <Image style={{ width: 30 }} src={gold} />;\r\n      default:\r\n        return <p>FALLO!</p>;\r\n    }\r\n  };\r\n\r\n  const conciertosMostrar = conciertos.map((concierto) => {\r\n    let fecha = DateTime.fromISO(concierto.fecha);\r\n    if (sesion) {\r\n      return (\r\n        <Card key={concierto._id}>\r\n          <Card.Img variant=\"top\" src={concierto.cartel} />\r\n          <Card.Body>\r\n            <Card.Title>\r\n              <Row\r\n                style={{\r\n                  backgroundColor: \"#EEEEEE\",\r\n                  borderRadius: 2,\r\n                  paddingTop: 5,\r\n                  paddingBottom: 5,\r\n                }}\r\n              >\r\n                <Col>{concierto.artista}</Col>\r\n                <Col sm={2}>\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    delay={{ show: 250, hide: 400 }}\r\n                    overlay={tier(concierto.categoria)}\r\n                  >\r\n                    {categoria(concierto.categoria)}\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Title>\r\n            <Card.Text> <Row>\r\n                <Col>\r\n                  <strong>Fecha:</strong> <br />\r\n                  {`${fecha.day}/${fecha.month}/${fecha.year} @${fecha.hour}:${fecha.minute}`}\r\n                </Col>\r\n                <Col>\r\n                  <strong>Slots:</strong> <br />\r\n                  <h4>{concierto.peso}</h4>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <strong>Lugar:</strong> {concierto.sala}\r\n                </Col>\r\n                <Col>\r\n                  <strong>Quedan:</strong> <br />\r\n                  <h4 style={{ color: \"#FF9900\" }}>{concierto.entradas}</h4>\r\n                </Col>\r\n              </Row>\r\n            </Card.Text>\r\n            <Row>{botonEntrada(concierto._id, concierto.categoria, concierto.peso)}</Row>\r\n          </Card.Body>\r\n        </Card>\r\n      );\r\n    } else {\r\n      return (\r\n        <Card key={concierto._id}>\r\n          <Card.Img variant=\"top\" src={concierto.cartel} />\r\n          <Card.Body>\r\n            <Card.Title>\r\n              <Row\r\n                style={{\r\n                  backgroundColor: \"#EEEEEE\",\r\n                  borderRadius: 2,\r\n                  paddingTop: 5,\r\n                  paddingBottom: 5,\r\n                }}\r\n              >\r\n                <Col>{concierto.artista}</Col>\r\n                <Col sm={2}>\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    delay={{ show: 250, hide: 400 }}\r\n                    overlay={tier(concierto.categoria)}\r\n                  >\r\n                    {categoria(concierto.categoria)}\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Title>\r\n            <Card.Text>\r\n              <Row>\r\n                <Col>\r\n                  Fecha: <br />\r\n                  <strong>{`${fecha.day}/${fecha.month}/${fecha.year} @${fecha.hour}:${fecha.minute}`}</strong>\r\n                  <br />\r\n                  Lugar: <br />\r\n                  <strong>{concierto.sala}</strong>\r\n                </Col>\r\n                <Col>\r\n                  Quedan: <br />\r\n                  <h3>{concierto.entradas}</h3>\r\n                </Col>\r\n              </Row>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      );\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <Container style={{ paddingBottom: 60, paddingTop: 60 }}>\r\n      <CardColumns>{conciertosMostrar}</CardColumns>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Conciertos;\r\n","H:\\Modulo3\\MultiPass\\client\\src\\Inicio.js",[],"H:\\Modulo3\\MultiPass\\client\\src\\Usuario.js",["50"],"import {\r\n  Container,\r\n  Row,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n  Jumbotron,\r\n  Col,\r\n  Form,\r\n  Alert,\r\n  Tooltip,\r\n  Image,\r\n  OverlayTrigger,\r\n  ProgressBar,\r\n} from \"react-bootstrap\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { BrowserRouter, Link, Redirect, Route } from \"react-router-dom\";\r\n\r\n//-----MEDIA------\r\n\r\nimport gold from \"./img/microphone_gold.png\";\r\nimport silver from \"./img/microphone_silver.png\";\r\nimport bronze from \"./img/microphone_bronze.png\";\r\n\r\n//---------------\r\n\r\nconst { DateTime } = require(\"luxon\");\r\nconst QRCode = require(\"qrcode.react\");\r\n\r\nexport default function Usuario({ sesion, setSesion, usuario, setUsuario, logout}) {\r\n  let peso = 0;\r\n  const [feedback, setFeedback] = useState(\"\");\r\n  const [refresh, setRefresh] = useState([])\r\n\r\n  useEffect(()=>{\r\n      fetch(\"/user/info\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.error) {\r\n            console.log({ status: \"Denegado\"});\r\n            setSesion(false)\r\n          } else {\r\n            setUsuario(data);\r\n            setSesion(true);\r\n          }\r\n        });\r\n  },[refresh])\r\n\r\n  const eliminarEntrada = (e) => {\r\n    fetch(\"/entradas/eliminar\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ id: e.target.value, email: usuario.email }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(function (datos) {\r\n        setRefresh([])\r\n        setFeedback(<Alert variant=\"success\">{datos.mensaje}</Alert>);\r\n      });\r\n  };\r\n\r\n  const DatosUsuario = () => {\r\n    const categoriaImagen = (categoria) => {\r\n      switch (categoria) {\r\n        case 5:\r\n          return <Image style={{ width: 30 }} src={bronze} />;\r\n        case 10:\r\n          return <Image style={{ width: 30 }} src={silver} />;\r\n        case 15:\r\n          return <Image style={{ width: 30 }} src={gold} />;\r\n        default:\r\n          return <p>FALLO!</p>;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <BrowserRouter>\r\n        <Row>\r\n          <Card style={{ width: \"100%\" }}>\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>\r\n                  <strong>{usuario.email}</strong>\r\n                </Col>\r\n                <Col>\r\n                  <Link to=\"/\">\r\n                    <Button size=\"sm\" variant=\"warning\" onClick={logout}>\r\n                      Cerrar sesión\r\n                    </Button>\r\n                  </Link>\r\n                </Col>\r\n                <Col>\r\n                  <Link to=\"/usuario/editar\">\r\n                    <Button size=\"sm\" variant=\"warning\">\r\n                      Editar datos\r\n                    </Button>\r\n                  </Link>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <Row>\r\n                  <Col sm={4}>\r\n                    <strong>Nombre:</strong> {usuario.nombre}{\" \"}\r\n                    {usuario.apellido1} {usuario.apellido2}\r\n                  </Col>\r\n                  <Col sm={4}>\r\n                    <strong>Dni:</strong> {usuario.dni}\r\n                  </Col>\r\n                  <Col sm={4}>\r\n                    <strong>Teléfono:</strong> {usuario.telf}\r\n                  </Col>\r\n                </Row>\r\n                <Row>⠀</Row>\r\n                <Row>\r\n                  <Col sm={4}>\r\n                    <strong>Categoría:</strong>{\" \"}\r\n                    {categoriaImagen(usuario.categoria)}\r\n                  </Col>\r\n                  <Col sm={8}>\r\n                    <strong>Pase:</strong> {peso}/{usuario.categoria}{\" \"}\r\n                    <ProgressBar\r\n                      variant=\"warning\"\r\n                      now={(100 * peso) / usuario.categoria}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Card.Text>\r\n\r\n              <Route exact path=\"/usuario/editar\">\r\n                <EditarUsuario />\r\n              </Route>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n      </BrowserRouter>\r\n    );\r\n  };\r\n\r\n  const EditarUsuario = () => {\r\n    const [nombre, setNombre] = useState(usuario.nombre);\r\n    const [apellido1, setApellido1] = useState(usuario.apellido1);\r\n    const [apellido2, setApellido2] = useState(usuario.apellido2);\r\n    const [dni, setDni] = useState(usuario.dni);\r\n    const [telf, setTelf] = useState(usuario.telf);\r\n    const [categoria, setCategoria] = useState(usuario.categoria);\r\n\r\n    const editar = () => {\r\n      fetch(\"/user/edit\", {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          nombre: nombre,\r\n          apellido1: apellido1,\r\n          apellido2: apellido2,\r\n          dni: dni,\r\n          telf: telf,\r\n          email: usuario.email,\r\n          categoria: categoria,\r\n        }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (!data.error) {\r\n            setFeedback(<Alert variant=\"success\">{data.mensaje}</Alert>)\r\n            setRefresh([])\r\n          } else {\r\n            setFeedback(<Alert variant=\"danger\">{data.mensaje}</Alert>);\r\n          }\r\n        });\r\n    };\r\n    \r\n\r\n    return (\r\n      <Container style={{ backgroundColor: \"#EEEEEE\", padding: 10 }}>\r\n        <Form>\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGridName\">\r\n              <Form.Label>Nombre</Form.Label>\r\n              <Form.Control\r\n                value={nombre}\r\n                onChange={(e) => {\r\n                  setNombre(e.target.value);\r\n                }}\r\n                type=\"input\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formGrid1Apellido\">\r\n              <Form.Label>1º Apellido</Form.Label>\r\n              <Form.Control\r\n                value={apellido1}\r\n                onChange={(e) => {\r\n                  setApellido1(e.target.value);\r\n                }}\r\n                type=\"input\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formGrid2Apellido\">\r\n              <Form.Label>2º Apellido</Form.Label>\r\n              <Form.Control\r\n                value={apellido2}\r\n                onChange={(e) => {\r\n                  setApellido2(e.target.value);\r\n                }}\r\n                type=\"input\"\r\n              />\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGridTelf\">\r\n              <Form.Label>Telefono:</Form.Label>\r\n              <Form.Control\r\n                value={telf}\r\n                onChange={(e) => {\r\n                  setTelf(e.target.value);\r\n                }}\r\n                type=\"input\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formGridDNI\">\r\n              <Form.Label>DNI</Form.Label>\r\n              <Form.Control\r\n                value={dni}\r\n                onChange={(e) => {\r\n                  setDni(e.target.value);\r\n                }}\r\n                type=\"input\"\r\n              />\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <fieldset>\r\n              <Form.Group as={Row}>\r\n                <Form.Label as=\"legend\" column sm={4}>\r\n                  Nivel de suscripción:\r\n                </Form.Label>\r\n                <Col sm={8}>\r\n                  <Form.Check\r\n                    type=\"radio\"\r\n                    label=\"Gold - 49.99€ / mes\"\r\n                    name=\"formHorizontalRadios\"\r\n                    id=\"tierGroupie\"\r\n                    value={15}\r\n                    onClick={(e) => {\r\n                      setCategoria(e.target.value);\r\n                    }}\r\n                    defaultChecked={usuario.categoria === 15}\r\n                  />\r\n                  <Form.Check\r\n                    type=\"radio\"\r\n                    label=\"Silver - 29.99€ / mes\"\r\n                    name=\"formHorizontalRadios\"\r\n                    id=\"tierFan\"\r\n                    value={10}\r\n                    onClick={(e) => {\r\n                      setCategoria(e.target.value);\r\n                    }}\r\n                    defaultChecked={usuario.categoria === 10}\r\n                    />\r\n                  <Form.Check\r\n                    type=\"radio\"\r\n                    label=\"Bronze - 19.99€ / mes\"\r\n                    name=\"formHorizontalRadios\"\r\n                    id=\"tierAficionado\"\r\n                    value={5}\r\n                    onClick={(e) => {\r\n                      setCategoria(e.target.value);\r\n                    }}\r\n                    defaultChecked={usuario.categoria === 5}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n            </fieldset>\r\n          </Form.Row>\r\n          <Form.Row>\r\n          <Col sm={6}>\r\n          <Button size=\"sm\" onClick={editar} variant=\"success\">\r\n            Guardar\r\n          </Button>\r\n          </Col>\r\n          <Col sm={6}>\r\n          <Link to=\"/usuario\">\r\n            <Button size=\"sm\" variant=\"danger\">\r\n              Descartar\r\n            </Button>\r\n          </Link>\r\n          </Col>\r\n          </Form.Row>\r\n        </Form>\r\n        <Row>⠀</Row>\r\n        {feedback}\r\n      </Container>\r\n      \r\n    );\r\n  };\r\n\r\n  let entradasMostrar;\r\n  if (usuario.entradas) {\r\n    const tier = (categoria) => {\r\n      switch (categoria) {\r\n        case 5:\r\n          return <Tooltip id=\"tier-help\">Bronze</Tooltip>;\r\n        case 10:\r\n          return <Tooltip id=\"tier-help\">Silver</Tooltip>;\r\n        case 15:\r\n          return <Tooltip id=\"tier-help\">Gold</Tooltip>;\r\n        default:\r\n          return <p>FALLO!</p>;\r\n      }\r\n    };\r\n\r\n    const categoria = (categoria) => {\r\n      switch (categoria) {\r\n        case 5:\r\n          return <Image style={{ width: 30 }} src={bronze} />;\r\n        case 10:\r\n          return <Image style={{ width: 30 }} src={silver} />;\r\n        case 15:\r\n          return <Image style={{ width: 30 }} src={gold} />;\r\n        default:\r\n          return <p>FALLO!</p>;\r\n      }\r\n    };\r\n\r\n    entradasMostrar = usuario.entradas.map((entrada) => {\r\n      peso += entrada.peso;\r\n      var fecha = DateTime.fromISO(entrada.fecha);\r\n      var qr = JSON.stringify({\r\n        email: usuario.email,\r\n        dni: usuario.dni,\r\n        entrada: {\r\n          id: entrada.id,\r\n          artista: entrada.grupo,\r\n          entrada: entrada.numero,\r\n          lugar: entrada.sala,\r\n          fecha: entrada.fecha,\r\n        },\r\n      });\r\n\r\n      return (\r\n        <Card key={entrada.id}>\r\n          <Card.Img variant=\"top\" src={entrada.cartel} />\r\n          <Card.Body>\r\n            <Card.Title>\r\n              <Row\r\n                style={{\r\n                  backgroundColor: \"#EEEEEE\",\r\n                  borderRadius: 2,\r\n                  paddingTop: 5,\r\n                  paddingBottom: 5,\r\n                }}\r\n              >\r\n                <Col>{entrada.grupo}</Col>\r\n                <Col sm={2}>\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    delay={{ show: 250, hide: 400 }}\r\n                    overlay={tier(entrada.categoria)}\r\n                  >\r\n                    {categoria(entrada.categoria)}\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Title>\r\n            <Card.Text>\r\n              <Row>\r\n                <Col>\r\n                  <strong>Fecha:</strong> <br />\r\n                  {`${fecha.day}/${fecha.month}/${fecha.year} @${fecha.hour}:${fecha.minute}`}\r\n                </Col>\r\n                <Col>\r\n                  <strong>Slots:</strong> <br />\r\n                  <h4>{entrada.peso}</h4>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <strong>Lugar:</strong> {entrada.sala}\r\n                </Col>\r\n                <Col>\r\n                  <strong>Entrada:</strong> <br />\r\n                  <h4 style={{ color: \"#FF9900\" }}>{entrada.numero}</h4>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col md={{ span: 4, offset: 3 }}>\r\n                  <QRCode value={qr} />\r\n                </Col>\r\n              </Row>\r\n            </Card.Text>\r\n            <Button\r\n              size=\"sm\"\r\n              variant=\"warning\"\r\n              value={entrada.id}\r\n              onClick={eliminarEntrada}\r\n              block\r\n            >\r\n              Eliminar\r\n            </Button>\r\n          </Card.Body>\r\n        </Card>\r\n      );\r\n    });\r\n  }\r\n\r\n  if (!sesion) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    if (usuario.entradas !== undefined && usuario.entradas.length > 0) {\r\n      return (\r\n        <Container>\r\n          <Row>⠀</Row>\r\n          <DatosUsuario />\r\n          <Row>⠀</Row>\r\n          <Row>\r\n            <CardColumns style={{ paddingBottom: 60 }}>\r\n              {entradasMostrar}\r\n            </CardColumns>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    } else {\r\n      return (\r\n        <Container>\r\n          <Row>⠀</Row>\r\n          <DatosUsuario />\r\n          <Row>⠀</Row>\r\n          <Row>\r\n            <Jumbotron style={{ width: \"100%\" }}>\r\n              <Container>\r\n                <h1>No hay entradas en tu MultiPass</h1>\r\n                <p>\r\n                  ¡Date una vuelta por <Link to=\"/conciertos\">Conciertos</Link>{\" \"}\r\n                  y añade los que quieras!\r\n                </p>\r\n              </Container>\r\n            </Jumbotron>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n}\r\n","H:\\Modulo3\\MultiPass\\client\\src\\Registro.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":20,"nodeType":"57","messageId":"58","endLine":1,"endColumn":29},{"ruleId":"55","severity":1,"message":"59","line":3,"column":44,"nodeType":"57","messageId":"58","endLine":3,"endColumn":49},{"ruleId":"60","severity":1,"message":"61","line":102,"column":19,"nodeType":"62","endLine":102,"endColumn":64},{"ruleId":"55","severity":1,"message":"63","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":14},{"ruleId":"55","severity":1,"message":"64","line":28,"column":18,"nodeType":"57","messageId":"58","endLine":28,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":28,"column":57,"nodeType":"67","messageId":"68","endLine":28,"endColumn":59},{"ruleId":"69","severity":1,"message":"70","line":47,"column":5,"nodeType":"71","endLine":47,"endColumn":14,"suggestions":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Link' is defined but never used.","'usado' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setSesion' and 'setUsuario'. Either include them or remove the dependency array. If 'setSesion' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["75"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [refresh, setSesion, setUsuario]",{"range":"78","text":"79"},[1130,1139],"[refresh, setSesion, setUsuario]"]